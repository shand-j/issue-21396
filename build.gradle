buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id "org.springframework.boot" version "2.6.8"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "java"
    id "com.github.johnrengelman.processes" version "0.5.0"

}
ext {
    mockitoVersion = "4.0.0"
    jacksonVersion = "2.13.3"
    packageExclusions = ["**/config/*", "**/constants/*", "**/model/*"]
}

group = "com.example.cloud"
description = "saas-distributed-service"
java.sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
configurations.testImplementation {
    exclude group: "ch.qos.logback", module: "logback-classic"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    testImplementation 'au.com.dius.pact.provider:junit5spring:4.2.16'
}

dependencyLocking {
    lockAllConfigurations()
}

task resolveAndLockAll {
    description = 'Resolves dependencies of all configurations and writes them into the lock file.'
    outputs.upToDateWhen { false }
    doFirst {
        assert gradle.startParameter.writeDependencyLocks || gradle.startParameter.lockedDependenciesToUpdate: 'Execute resolveAndLockAll --write-locks or --update-locks <dependencies>'
    }
    doLast {
        project.configurations.findAll { it.canBeResolved }*.resolve()
    }
}

jar {
    manifest {
        attributes "Main-Class": "com.example.cloud.Main.java"

    }
}

processResources {
    filesNotMatching(["**/schema/**", "**/terraform/**", "**/db/**"]) {
        expand(project.properties)
    }
}

tasks.test {
    useJUnitPlatform()
    filter {
        excludeTestsMatching("ContractVerificationTest")
    }
}
